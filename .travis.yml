sudo: required

dist: xenial

language: java

services:
  - docker

# No output from git clone command
git:
  quiet: true

# All environment variables must be in one line to trigger a single build.
env:
  - EI_BACKEND_PORT=8099 JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64

before_install:
  - sudo apt-get update
  - sudo apt-get install -y openjdk-8-jdk
  - export PATH=$(echo "$PATH" | sed -e 's/:\/usr\/local\/lib\/jvm\/openjdk11\/bin//')
  - export PATH=/usr/lib/jvm/java-8-openjdk-amd64/bin:$PATH
  - export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64
  - java -version

# Using default 'test' stage for our tests, and only running deploy stage
# (after merge) on master branch
stages:
  - test
  - name: report_coverage
    if: branch = master AND type != pull_request
  - name: deploy
    if: branch = master AND type != pull_request

# Only used before integrationTests
# Generate site documentation using mvn site plugin
before_deploy:
  - rm -rf docs
  - mvn site -B

# List of jobs to run, tied to specific stages
jobs:
  include:
    - stage: test
      name: functionalTests
      before_install: skip
      install: skip
      script:
        - sudo apt-get update
        - sudo apt-get install -y openjdk-8-jdk
        - export PATH=$(echo "$PATH" | sed -e 's/:\/usr\/local\/lib\/jvm\/openjdk11\/bin//')
        - export PATH=/usr/lib/jvm/java-8-openjdk-amd64/bin:$PATH
        - echo $PATH
        - export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64
        - java -version
        - mvn test -B
    - stage: test
      name: integrationTests
      before_script:
        - source src/main/docker/env.bash
        - docker-compose -f src/main/docker/docker-compose.yml up -d eiffel-er mongodb rabbitmq jenkins mail-server ldap ldap-seed ldap2 ldap2-seed
        - echo 'Sleeping till Jenkins is up.'
        - timeout 90 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' $HOST:$JENKINS_PORT/login)" != "200" ]]; do sleep 5; done' || false
        - git clone --depth=50 --branch=master https://github.com/eiffel-community/eiffel-intelligence.git
        - cd eiffel-intelligence
        - chmod +x pom.xml
        - mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V
        - export EIFFEL_WAR=$(ls target/*.war)
        - java -Dspring.config.additional-location=file:../src/integrationtest/resources/integration-test.properties -Dserver.port=${EI_BACKEND_PORT} -jar ${EIFFEL_WAR} &
        - cd ..
        - echo 'Sleeping till EI is up.'
        - timeout 30 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' $HOST:$EI_BACKEND_PORT/status)" != "200" ]]; do sleep 5; done' || false
      script:
        - "mvn verify -P integrationTest -DskipUTs -Dei.backend.instances.list.json.content=\"[{ 'contextPath': '', 'port': '${EI_BACKEND_PORT}', 'name': 'EI-Backend-1', 'host': 'localhost', 'https': false, 'defaultBackend': true}]\" -B"
      after_script:
        - docker-compose -f src/main/docker/docker-compose.yml down
        - fuser -k ${EI_BACKEND_PORT}/tcp
    - stage: deploy
      name: deployGitHubPages
      before_install: skip    # do not run again
      install: skip           # do not run again
      script: skip            # do not run default test scripts
      deploy:
        provider: pages
        skip_cleanup: true
        github-token: $GITHUB_TOKEN
        local_dir: docs/
    - stage: report_coverage
      name: report_coverage
      before_install: skip
      install: skip
      # Generating test coverage report and publishing to Codacy
      script:
        - mvn cobertura:cobertura -B
        - curl -Ls -o codacy-coverage-reporter-assembly.jar https://github.com/codacy/codacy-coverage-reporter/releases/download/6.0.2/codacy-coverage-reporter-6.0.2-assembly.jar
        - java -jar codacy-coverage-reporter-assembly.jar report -l Java -r target/site/cobertura/coverage.xml
